// Code generated by ent, DO NOT EDIT.

package auditlog

import (
	"audit-system/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLTE(FieldID, id))
}

// ClientID applies equality check predicate on the "client_id" field. It's identical to ClientIDEQ.
func ClientID(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldClientID, v))
}

// Timestamp applies equality check predicate on the "timestamp" field. It's identical to TimestampEQ.
func Timestamp(v time.Time) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldTimestamp, v))
}

// Entity applies equality check predicate on the "entity" field. It's identical to EntityEQ.
func Entity(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldEntity, v))
}

// Mutation applies equality check predicate on the "mutation" field. It's identical to MutationEQ.
func Mutation(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldMutation, v))
}

// ClientIDEQ applies the EQ predicate on the "client_id" field.
func ClientIDEQ(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldClientID, v))
}

// ClientIDNEQ applies the NEQ predicate on the "client_id" field.
func ClientIDNEQ(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNEQ(FieldClientID, v))
}

// ClientIDIn applies the In predicate on the "client_id" field.
func ClientIDIn(vs ...string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldIn(FieldClientID, vs...))
}

// ClientIDNotIn applies the NotIn predicate on the "client_id" field.
func ClientIDNotIn(vs ...string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNotIn(FieldClientID, vs...))
}

// ClientIDGT applies the GT predicate on the "client_id" field.
func ClientIDGT(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGT(FieldClientID, v))
}

// ClientIDGTE applies the GTE predicate on the "client_id" field.
func ClientIDGTE(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGTE(FieldClientID, v))
}

// ClientIDLT applies the LT predicate on the "client_id" field.
func ClientIDLT(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLT(FieldClientID, v))
}

// ClientIDLTE applies the LTE predicate on the "client_id" field.
func ClientIDLTE(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLTE(FieldClientID, v))
}

// ClientIDContains applies the Contains predicate on the "client_id" field.
func ClientIDContains(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldContains(FieldClientID, v))
}

// ClientIDHasPrefix applies the HasPrefix predicate on the "client_id" field.
func ClientIDHasPrefix(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldHasPrefix(FieldClientID, v))
}

// ClientIDHasSuffix applies the HasSuffix predicate on the "client_id" field.
func ClientIDHasSuffix(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldHasSuffix(FieldClientID, v))
}

// ClientIDEqualFold applies the EqualFold predicate on the "client_id" field.
func ClientIDEqualFold(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEqualFold(FieldClientID, v))
}

// ClientIDContainsFold applies the ContainsFold predicate on the "client_id" field.
func ClientIDContainsFold(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldContainsFold(FieldClientID, v))
}

// TimestampEQ applies the EQ predicate on the "timestamp" field.
func TimestampEQ(v time.Time) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldTimestamp, v))
}

// TimestampNEQ applies the NEQ predicate on the "timestamp" field.
func TimestampNEQ(v time.Time) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNEQ(FieldTimestamp, v))
}

// TimestampIn applies the In predicate on the "timestamp" field.
func TimestampIn(vs ...time.Time) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldIn(FieldTimestamp, vs...))
}

// TimestampNotIn applies the NotIn predicate on the "timestamp" field.
func TimestampNotIn(vs ...time.Time) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNotIn(FieldTimestamp, vs...))
}

// TimestampGT applies the GT predicate on the "timestamp" field.
func TimestampGT(v time.Time) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGT(FieldTimestamp, v))
}

// TimestampGTE applies the GTE predicate on the "timestamp" field.
func TimestampGTE(v time.Time) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGTE(FieldTimestamp, v))
}

// TimestampLT applies the LT predicate on the "timestamp" field.
func TimestampLT(v time.Time) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLT(FieldTimestamp, v))
}

// TimestampLTE applies the LTE predicate on the "timestamp" field.
func TimestampLTE(v time.Time) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLTE(FieldTimestamp, v))
}

// EntityEQ applies the EQ predicate on the "entity" field.
func EntityEQ(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldEntity, v))
}

// EntityNEQ applies the NEQ predicate on the "entity" field.
func EntityNEQ(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNEQ(FieldEntity, v))
}

// EntityIn applies the In predicate on the "entity" field.
func EntityIn(vs ...string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldIn(FieldEntity, vs...))
}

// EntityNotIn applies the NotIn predicate on the "entity" field.
func EntityNotIn(vs ...string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNotIn(FieldEntity, vs...))
}

// EntityGT applies the GT predicate on the "entity" field.
func EntityGT(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGT(FieldEntity, v))
}

// EntityGTE applies the GTE predicate on the "entity" field.
func EntityGTE(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGTE(FieldEntity, v))
}

// EntityLT applies the LT predicate on the "entity" field.
func EntityLT(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLT(FieldEntity, v))
}

// EntityLTE applies the LTE predicate on the "entity" field.
func EntityLTE(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLTE(FieldEntity, v))
}

// EntityContains applies the Contains predicate on the "entity" field.
func EntityContains(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldContains(FieldEntity, v))
}

// EntityHasPrefix applies the HasPrefix predicate on the "entity" field.
func EntityHasPrefix(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldHasPrefix(FieldEntity, v))
}

// EntityHasSuffix applies the HasSuffix predicate on the "entity" field.
func EntityHasSuffix(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldHasSuffix(FieldEntity, v))
}

// EntityEqualFold applies the EqualFold predicate on the "entity" field.
func EntityEqualFold(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEqualFold(FieldEntity, v))
}

// EntityContainsFold applies the ContainsFold predicate on the "entity" field.
func EntityContainsFold(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldContainsFold(FieldEntity, v))
}

// MutationEQ applies the EQ predicate on the "mutation" field.
func MutationEQ(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldMutation, v))
}

// MutationNEQ applies the NEQ predicate on the "mutation" field.
func MutationNEQ(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNEQ(FieldMutation, v))
}

// MutationIn applies the In predicate on the "mutation" field.
func MutationIn(vs ...string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldIn(FieldMutation, vs...))
}

// MutationNotIn applies the NotIn predicate on the "mutation" field.
func MutationNotIn(vs ...string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNotIn(FieldMutation, vs...))
}

// MutationGT applies the GT predicate on the "mutation" field.
func MutationGT(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGT(FieldMutation, v))
}

// MutationGTE applies the GTE predicate on the "mutation" field.
func MutationGTE(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGTE(FieldMutation, v))
}

// MutationLT applies the LT predicate on the "mutation" field.
func MutationLT(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLT(FieldMutation, v))
}

// MutationLTE applies the LTE predicate on the "mutation" field.
func MutationLTE(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLTE(FieldMutation, v))
}

// MutationContains applies the Contains predicate on the "mutation" field.
func MutationContains(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldContains(FieldMutation, v))
}

// MutationHasPrefix applies the HasPrefix predicate on the "mutation" field.
func MutationHasPrefix(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldHasPrefix(FieldMutation, v))
}

// MutationHasSuffix applies the HasSuffix predicate on the "mutation" field.
func MutationHasSuffix(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldHasSuffix(FieldMutation, v))
}

// MutationEqualFold applies the EqualFold predicate on the "mutation" field.
func MutationEqualFold(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEqualFold(FieldMutation, v))
}

// MutationContainsFold applies the ContainsFold predicate on the "mutation" field.
func MutationContainsFold(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldContainsFold(FieldMutation, v))
}

// BeforeIsNil applies the IsNil predicate on the "before" field.
func BeforeIsNil() predicate.AuditLog {
	return predicate.AuditLog(sql.FieldIsNull(FieldBefore))
}

// BeforeNotNil applies the NotNil predicate on the "before" field.
func BeforeNotNil() predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNotNull(FieldBefore))
}

// AfterIsNil applies the IsNil predicate on the "after" field.
func AfterIsNil() predicate.AuditLog {
	return predicate.AuditLog(sql.FieldIsNull(FieldAfter))
}

// AfterNotNil applies the NotNil predicate on the "after" field.
func AfterNotNil() predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNotNull(FieldAfter))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AuditLog) predicate.AuditLog {
	return predicate.AuditLog(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AuditLog) predicate.AuditLog {
	return predicate.AuditLog(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AuditLog) predicate.AuditLog {
	return predicate.AuditLog(sql.NotPredicates(p))
}
