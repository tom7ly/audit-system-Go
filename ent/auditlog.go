// Code generated by ent, DO NOT EDIT.

package ent

import (
	"audit-system/ent/auditlog"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// AuditLog is the model entity for the AuditLog schema.
type AuditLog struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ClientID holds the value of the "client_id" field.
	ClientID string `json:"client_id,omitempty"`
	// Timestamp holds the value of the "timestamp" field.
	Timestamp time.Time `json:"timestamp,omitempty"`
	// Entity holds the value of the "entity" field.
	Entity string `json:"entity,omitempty"`
	// Mutation holds the value of the "mutation" field.
	Mutation string `json:"mutation,omitempty"`
	// Before holds the value of the "before" field.
	Before map[string]interface{} `json:"before,omitempty"`
	// After holds the value of the "after" field.
	After        map[string]interface{} `json:"after,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AuditLog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case auditlog.FieldBefore, auditlog.FieldAfter:
			values[i] = new([]byte)
		case auditlog.FieldID:
			values[i] = new(sql.NullInt64)
		case auditlog.FieldClientID, auditlog.FieldEntity, auditlog.FieldMutation:
			values[i] = new(sql.NullString)
		case auditlog.FieldTimestamp:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AuditLog fields.
func (al *AuditLog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case auditlog.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			al.ID = int(value.Int64)
		case auditlog.FieldClientID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_id", values[i])
			} else if value.Valid {
				al.ClientID = value.String
			}
		case auditlog.FieldTimestamp:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field timestamp", values[i])
			} else if value.Valid {
				al.Timestamp = value.Time
			}
		case auditlog.FieldEntity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field entity", values[i])
			} else if value.Valid {
				al.Entity = value.String
			}
		case auditlog.FieldMutation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mutation", values[i])
			} else if value.Valid {
				al.Mutation = value.String
			}
		case auditlog.FieldBefore:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field before", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &al.Before); err != nil {
					return fmt.Errorf("unmarshal field before: %w", err)
				}
			}
		case auditlog.FieldAfter:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field after", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &al.After); err != nil {
					return fmt.Errorf("unmarshal field after: %w", err)
				}
			}
		default:
			al.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AuditLog.
// This includes values selected through modifiers, order, etc.
func (al *AuditLog) Value(name string) (ent.Value, error) {
	return al.selectValues.Get(name)
}

// Update returns a builder for updating this AuditLog.
// Note that you need to call AuditLog.Unwrap() before calling this method if this AuditLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (al *AuditLog) Update() *AuditLogUpdateOne {
	return NewAuditLogClient(al.config).UpdateOne(al)
}

// Unwrap unwraps the AuditLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (al *AuditLog) Unwrap() *AuditLog {
	_tx, ok := al.config.driver.(*txDriver)
	if !ok {
		panic("ent: AuditLog is not a transactional entity")
	}
	al.config.driver = _tx.drv
	return al
}

// String implements the fmt.Stringer.
func (al *AuditLog) String() string {
	var builder strings.Builder
	builder.WriteString("AuditLog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", al.ID))
	builder.WriteString("client_id=")
	builder.WriteString(al.ClientID)
	builder.WriteString(", ")
	builder.WriteString("timestamp=")
	builder.WriteString(al.Timestamp.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("entity=")
	builder.WriteString(al.Entity)
	builder.WriteString(", ")
	builder.WriteString("mutation=")
	builder.WriteString(al.Mutation)
	builder.WriteString(", ")
	builder.WriteString("before=")
	builder.WriteString(fmt.Sprintf("%v", al.Before))
	builder.WriteString(", ")
	builder.WriteString("after=")
	builder.WriteString(fmt.Sprintf("%v", al.After))
	builder.WriteByte(')')
	return builder.String()
}

// AuditLogs is a parsable slice of AuditLog.
type AuditLogs []*AuditLog
