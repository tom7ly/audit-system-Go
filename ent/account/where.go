// Code generated by ent, DO NOT EDIT.

package account

import (
	"audit-system/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldID, id))
}

// Balance applies equality check predicate on the "balance" field. It's identical to BalanceEQ.
func Balance(v float64) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldBalance, v))
}

// LastTransferTime applies equality check predicate on the "last_transfer_time" field. It's identical to LastTransferTimeEQ.
func LastTransferTime(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldLastTransferTime, v))
}

// BalanceEQ applies the EQ predicate on the "balance" field.
func BalanceEQ(v float64) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldBalance, v))
}

// BalanceNEQ applies the NEQ predicate on the "balance" field.
func BalanceNEQ(v float64) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldBalance, v))
}

// BalanceIn applies the In predicate on the "balance" field.
func BalanceIn(vs ...float64) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldBalance, vs...))
}

// BalanceNotIn applies the NotIn predicate on the "balance" field.
func BalanceNotIn(vs ...float64) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldBalance, vs...))
}

// BalanceGT applies the GT predicate on the "balance" field.
func BalanceGT(v float64) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldBalance, v))
}

// BalanceGTE applies the GTE predicate on the "balance" field.
func BalanceGTE(v float64) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldBalance, v))
}

// BalanceLT applies the LT predicate on the "balance" field.
func BalanceLT(v float64) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldBalance, v))
}

// BalanceLTE applies the LTE predicate on the "balance" field.
func BalanceLTE(v float64) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldBalance, v))
}

// LastTransferTimeEQ applies the EQ predicate on the "last_transfer_time" field.
func LastTransferTimeEQ(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldLastTransferTime, v))
}

// LastTransferTimeNEQ applies the NEQ predicate on the "last_transfer_time" field.
func LastTransferTimeNEQ(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldLastTransferTime, v))
}

// LastTransferTimeIn applies the In predicate on the "last_transfer_time" field.
func LastTransferTimeIn(vs ...time.Time) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldLastTransferTime, vs...))
}

// LastTransferTimeNotIn applies the NotIn predicate on the "last_transfer_time" field.
func LastTransferTimeNotIn(vs ...time.Time) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldLastTransferTime, vs...))
}

// LastTransferTimeGT applies the GT predicate on the "last_transfer_time" field.
func LastTransferTimeGT(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldLastTransferTime, v))
}

// LastTransferTimeGTE applies the GTE predicate on the "last_transfer_time" field.
func LastTransferTimeGTE(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldLastTransferTime, v))
}

// LastTransferTimeLT applies the LT predicate on the "last_transfer_time" field.
func LastTransferTimeLT(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldLastTransferTime, v))
}

// LastTransferTimeLTE applies the LTE predicate on the "last_transfer_time" field.
func LastTransferTimeLTE(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldLastTransferTime, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOutgoingTransactions applies the HasEdge predicate on the "outgoing_transactions" edge.
func HasOutgoingTransactions() predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OutgoingTransactionsTable, OutgoingTransactionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOutgoingTransactionsWith applies the HasEdge predicate on the "outgoing_transactions" edge with a given conditions (other predicates).
func HasOutgoingTransactionsWith(preds ...predicate.Transaction) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		step := newOutgoingTransactionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasIncomingTransactions applies the HasEdge predicate on the "incoming_transactions" edge.
func HasIncomingTransactions() predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, IncomingTransactionsTable, IncomingTransactionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasIncomingTransactionsWith applies the HasEdge predicate on the "incoming_transactions" edge with a given conditions (other predicates).
func HasIncomingTransactionsWith(preds ...predicate.Transaction) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		step := newIncomingTransactionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Account) predicate.Account {
	return predicate.Account(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Account) predicate.Account {
	return predicate.Account(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Account) predicate.Account {
	return predicate.Account(sql.NotPredicates(p))
}
