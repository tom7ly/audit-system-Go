// Code generated by ent, DO NOT EDIT.

package ent

import (
	"audit-system/ent/account"
	"audit-system/ent/user"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Account is the model entity for the Account schema.
type Account struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Balance holds the value of the "balance" field.
	Balance float64 `json:"balance,omitempty"`
	// LastTransferTime holds the value of the "last_transfer_time" field.
	LastTransferTime time.Time `json:"last_transfer_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AccountQuery when eager-loading is set.
	Edges         AccountEdges `json:"edges"`
	user_accounts *int
	selectValues  sql.SelectValues
}

// AccountEdges holds the relations/edges for other nodes in the graph.
type AccountEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// OutgoingTransactions holds the value of the outgoing_transactions edge.
	OutgoingTransactions []*Transaction `json:"outgoing_transactions,omitempty"`
	// IncomingTransactions holds the value of the incoming_transactions edge.
	IncomingTransactions []*Transaction `json:"incoming_transactions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AccountEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// OutgoingTransactionsOrErr returns the OutgoingTransactions value or an error if the edge
// was not loaded in eager-loading.
func (e AccountEdges) OutgoingTransactionsOrErr() ([]*Transaction, error) {
	if e.loadedTypes[1] {
		return e.OutgoingTransactions, nil
	}
	return nil, &NotLoadedError{edge: "outgoing_transactions"}
}

// IncomingTransactionsOrErr returns the IncomingTransactions value or an error if the edge
// was not loaded in eager-loading.
func (e AccountEdges) IncomingTransactionsOrErr() ([]*Transaction, error) {
	if e.loadedTypes[2] {
		return e.IncomingTransactions, nil
	}
	return nil, &NotLoadedError{edge: "incoming_transactions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Account) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case account.FieldBalance:
			values[i] = new(sql.NullFloat64)
		case account.FieldID:
			values[i] = new(sql.NullInt64)
		case account.FieldLastTransferTime:
			values[i] = new(sql.NullTime)
		case account.ForeignKeys[0]: // user_accounts
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Account fields.
func (a *Account) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case account.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case account.FieldBalance:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field balance", values[i])
			} else if value.Valid {
				a.Balance = value.Float64
			}
		case account.FieldLastTransferTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_transfer_time", values[i])
			} else if value.Valid {
				a.LastTransferTime = value.Time
			}
		case account.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_accounts", value)
			} else if value.Valid {
				a.user_accounts = new(int)
				*a.user_accounts = int(value.Int64)
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Account.
// This includes values selected through modifiers, order, etc.
func (a *Account) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Account entity.
func (a *Account) QueryUser() *UserQuery {
	return NewAccountClient(a.config).QueryUser(a)
}

// QueryOutgoingTransactions queries the "outgoing_transactions" edge of the Account entity.
func (a *Account) QueryOutgoingTransactions() *TransactionQuery {
	return NewAccountClient(a.config).QueryOutgoingTransactions(a)
}

// QueryIncomingTransactions queries the "incoming_transactions" edge of the Account entity.
func (a *Account) QueryIncomingTransactions() *TransactionQuery {
	return NewAccountClient(a.config).QueryIncomingTransactions(a)
}

// Update returns a builder for updating this Account.
// Note that you need to call Account.Unwrap() before calling this method if this Account
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Account) Update() *AccountUpdateOne {
	return NewAccountClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Account entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Account) Unwrap() *Account {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Account is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Account) String() string {
	var builder strings.Builder
	builder.WriteString("Account(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("balance=")
	builder.WriteString(fmt.Sprintf("%v", a.Balance))
	builder.WriteString(", ")
	builder.WriteString("last_transfer_time=")
	builder.WriteString(a.LastTransferTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Accounts is a parsable slice of Account.
type Accounts []*Account
